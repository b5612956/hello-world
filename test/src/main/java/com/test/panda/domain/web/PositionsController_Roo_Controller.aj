// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.test.panda.domain.web;

import com.test.panda.domain.Positions;
import com.test.panda.domain.web.PositionsController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PositionsController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PositionsController.create(@Valid Positions positions, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, positions);
            return "positionses/create";
        }
        uiModel.asMap().clear();
        positions.persist();
        return "redirect:/positionses/" + encodeUrlPathSegment(positions.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PositionsController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Positions());
        return "positionses/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String PositionsController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("positions", Positions.findPositions(id));
        uiModel.addAttribute("itemId", id);
        return "positionses/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PositionsController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("positionses", Positions.findPositionsEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) Positions.countPositionses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("positionses", Positions.findAllPositionses(sortFieldName, sortOrder));
        }
        return "positionses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PositionsController.update(@Valid Positions positions, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, positions);
            return "positionses/update";
        }
        uiModel.asMap().clear();
        positions.merge();
        return "redirect:/positionses/" + encodeUrlPathSegment(positions.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String PositionsController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Positions.findPositions(id));
        return "positionses/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String PositionsController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Positions positions = Positions.findPositions(id);
        positions.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/positionses";
    }
    
    void PositionsController.populateEditForm(Model uiModel, Positions positions) {
        uiModel.addAttribute("positions", positions);
    }
    
    String PositionsController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
